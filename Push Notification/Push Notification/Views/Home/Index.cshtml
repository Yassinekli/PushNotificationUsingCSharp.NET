@model Push_Notification.Models.SubscribersSet
@using Push_Notification.Models;

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="manifest" href="/manifest.json">
    <title>Index</title>
</head>
<body>
    <div>
        
            <input id="btnPush" type="submit" value="Click to Push Notification !"/>
        

        <script>
            if('serviceWorker' in navigator)
            {
                navigator.serviceWorker.register('/sw.js')
                .then(function (registration) {
                    return navigator.serviceWorker.ready;
                })
                .then(function(registration){
                    Notification.requestPermission(function(result) {
                        if (result == 'granted') {
                            registration.pushManager.getSubscription()
                            .then(function(subscription) {
                                if (!subscription) {
                                    var vapidPublicKey = "BMl6hADzk-Je4guA6a5k7FwDSW_VpXYUgEaaP0xvZI6iuOT8HxyesmMiPF0G7wHnk6Cij1-gS4MYWEBO181X8zI";
                                    return registration.pushManager.subscribe({
                                        userVisibleOnly: true,
                                        applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)
                                    }).then(function(subscriber) {
                                        console.log(subscriber);

                                        var subscriberObject = new Object();
                                        subscriberObject.endPoint = subscriber.endpoint;
                                        subscriberObject.auth = subscriber.toJSON().keys.auth;
                                        subscriberObject.p256dh = subscriber.toJSON().keys.p256dh;
                                        
                                        fetch('@Url.Action("AddNewSubscriber", "Home")', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({ newSubscriber: subscriberObject })
                                        });
                                    });
                                }
                            })
                        }
                    })
                })
            }

            // Convert VAPID Public Key to Uint8 array.
            function urlBase64ToUint8Array(base64String) {
                var padding = '='.repeat((4 - base64String.length % 4) % 4);
                var base64 = (base64String + padding)
                  .replace(/\-/g, '+')
                  .replace(/_/g, '/');

                var rawData = window.atob(base64);
                var outputArray = new Uint8Array(rawData.length);

                for (var i = 0; i < rawData.length; ++i) {
                    outputArray[i] = rawData.charCodeAt(i);
                }
                return outputArray;
            }

            // Add click event to btnSend
            document.getElementById('btnPush').addEventListener('click', function (event) {
                fetch('@Url.Action("PushNotification")');
            });
        </script>
    </div>
</body>
</html>
